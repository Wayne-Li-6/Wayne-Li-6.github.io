{"version":3,"sources":["js/AnimatedName.tsx","js/App.tsx","js/serviceWorker.ts","index.tsx"],"names":["AnimatedName","anime","timeline","add","targets","strokeDashoffset","setDashoffset","easing","duration","delay","stagger","start","direction","loop","autoplay","fill","d","value","this","introAnimation","version","xmlns","viewBox","transform","className","id","x","y","clip-path","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySA+DeA,G,qLAxDaC,IAAMC,WAGzBC,IAAI,CACDC,QAAS,OACTC,iBAAkB,CAACJ,IAAMK,cAAe,GACxCC,OAAQ,cACRC,SAAU,IACVC,MAAOR,IAAMS,QAAQ,IAAK,CAACC,MAAO,MAClCC,UAAW,YACXC,MAAM,EACNC,UAAU,EACVC,KAAM,YAETZ,IAAI,CACDC,QAAS,OACTY,EAAG,CACC,CAAEC,MAAO,6BACT,CAAEA,MAAO,kCAEbV,OAAQ,cACRC,SAAU,KACVK,MAAM,GACP,U,0CAKHK,KAAKC,mB,+BAKL,OACI,yBAAKC,QAAQ,MAAMC,MAAM,6BAA6BC,QAAQ,iBAC1D,uBAAGC,UAAU,0CACT,0BAAMC,UAAU,MAAMR,EAAE,wNACxB,0BAAMQ,UAAU,MAAMR,EAAE,sQACxB,0BAAMQ,UAAU,MAAMR,EAAE,sJACxB,0BAAMQ,UAAU,MAAMR,EAAE,sJACxB,0BAAMQ,UAAU,MAAMR,EAAE,kQACxB,0BAAMQ,UAAU,MAAMR,EAAE,kTACxB,0BAAMQ,UAAU,MAAMR,EAAE,uNAK5B,8BAAUS,GAAG,aACT,0BAAMD,UAAU,MAAMR,EAAE,gCAE5B,0BAAMQ,UAAU,MAAME,EAAE,MAAMC,EAAE,MAAMC,YAAU,mBAAhD,c,GArDWC,IAAMC,YCUlBC,MAVf,WACE,OACE,yBAAKP,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,SCIYQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.82d6c2c4.chunk.js","sourcesContent":["import React from 'react';\r\nimport anime from 'animejs';\r\nimport '../css/AnimatedName.css';\r\n\r\nclass AnimatedName extends React.Component {\r\n\r\n    introAnimation() {\r\n        var introTimeline = anime.timeline();\r\n\r\n        introTimeline\r\n        .add({\r\n            targets: '.pa1',\r\n            strokeDashoffset: [anime.setDashoffset, 0],\r\n            easing: 'easeOutQuad',\r\n            duration: 750,\r\n            delay: anime.stagger(500, {start: 500}),\r\n            direction: 'alternate',\r\n            loop: false,\r\n            autoplay: true,\r\n            fill: '#282c34',\r\n        })\r\n        .add({\r\n            targets: '.re1',\r\n            d: [\r\n                { value: \"M 512 612 h 2 v 80 h -2 Z\" },\r\n                { value: \"M 300 612 h 424 v 80 h -424 Z\" },\r\n            ],\r\n            easing: 'easeOutCirc',\r\n            duration: 2800,\r\n            loop: false,\r\n        }, '3000');\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.introAnimation();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\">\r\n                <g transform=\"scale(0.5, -0.5) translate(512, -1100)\">\r\n                    <path className=\"pa1\" d=\"M 532 669 Q 595 682 743 693 Q 753 692 764 705 Q 765 717 742 728 Q 709 749 653 736 Q 599 726 544 713 Q 538 712 536 711 L 485 702 Q 382 692 278 682 Q 247 679 270 660 Q 301 633 347 641 Q 392 650 448 657 L 532 669 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 531 663 Q 531 667 532 669 L 536 711 Q 539 762 558 794 Q 565 804 553 817 Q 531 835 503 846 Q 487 855 473 849 Q 460 845 465 830 Q 483 802 485 702 L 485 618 Q 479 509 489 491 Q 490 488 493 483 Q 503 467 517 475 Q 527 485 529 568 Q 529 610 530 630 L 531 663 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 448 657 Q 367 530 153 402 Q 140 392 148 389 Q 157 383 169 387 Q 289 417 419 547 Q 429 559 442 570 Q 479 610 485 618 C 525 665 477 701 448 657 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 530 630 Q 732 428 787 418 Q 869 418 939 436 Q 958 440 959 444 Q 960 451 946 456 Q 748 517 669 563 Q 627 588 531 663 C 507 681 509 651 530 630 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 523 317 Q 623 395 657 403 Q 675 409 669 424 Q 666 439 607 473 Q 589 483 569 475 Q 509 453 419 429 Q 395 422 339 424 Q 317 425 325 406 Q 332 394 349 384 Q 376 369 411 388 Q 555 439 568 432 Q 578 426 574 414 Q 543 374 509 327 C 491 303 499 299 523 317 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 550 278 Q 547 302 529 314 Q 525 317 523 317 L 509 327 Q 472 351 458 353 Q 448 356 448 336 Q 449 321 468 308 Q 490 290 496 271 L 503 236 Q 519 82 495 42 Q 494 41 492 38 Q 486 34 419 42 Q 380 51 379 44 Q 379 38 455 -26 Q 474 -44 489 -67 Q 496 -76 507 -71 Q 520 -64 543 -28 Q 573 30 556 239 L 550 278 Z\"></path>\r\n                    <path className=\"pa1\" d=\"M 556 239 Q 677 248 845 243 Q 879 242 910 241 Q 932 241 938 250 Q 945 263 926 280 Q 868 328 796 313 Q 697 297 550 278 L 496 271 Q 315 253 103 233 Q 79 232 96 211 Q 130 177 175 186 Q 346 228 503 236 L 556 239 Z\"></path>\r\n                </g>\r\n                {/* <path d=\"M 0 0 h 1024 v 1024 h -1024 Z\" fill=\"transparent\" stroke=\"black\"/>\r\n                <path d=\"M 512 0 v 1024 Z\" fill=\"transparent\" stroke=\"black\"/>\r\n                <path d=\"M 0 512 h 1024 Z\" fill=\"transparent\" stroke=\"black\"/> */}\r\n                <clipPath id=\"show-name\">\r\n                    <path className=\"re1\" d=\"M 511 -200 h 3 v 80 h -3 Z\"/>\r\n                </clipPath>\r\n                <text className=\"hd1\" x=\"303\" y=\"682\" clip-path=\"url(#show-name)\">WAYNE</text>\r\n            </svg>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AnimatedName;","import React from 'react';\nimport '../css/App.css';\nimport AnimatedName from './AnimatedName';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <AnimatedName />\n      </header>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './js/serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}